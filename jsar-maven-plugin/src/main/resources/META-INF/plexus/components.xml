<component-set>
	<components>
		<component>
			<role>org.apache.maven.lifecycle.mapping.LifecycleMapping</role>
			<role-hint>jsar</role-hint>
			<implementation>org.apache.maven.lifecycle.mapping.DefaultLifecycleMapping
			</implementation>
			<configuration>
				<phases>
					<generate-sources>com.github.dmackenzie1.javascript-framework:jsdependency-maven-plugin:js-dependency
					</generate-sources>
					<process-resources>org.apache.maven.plugins:maven-resources-plugin:resources
					</process-resources>
					<process-test-resources>org.apache.maven.plugins:maven-resources-plugin:testResources
					</process-test-resources>
					<compile>com.github.dmackenzie1.javascript-framework:jspreprocessor-maven-plugin:compile-preprocessors
					</compile>
					<generate-test-sources>com.github.dmackenzie1.javascript-framework:jsdependency-maven-plugin:js-test-dependency
					</generate-test-sources>
					<test>com.github.dmackenzie1.javascript-framework:closure-testing-maven-plugin:js-closure-test
					</test>
					<process-classes>com.github.dmackenzie1.javascript-framework:closure-compiler-maven-plugin:js-closure-compile
					</process-classes>
					<package>com.github.dmackenzie1.javascript-framework:jsar-maven-plugin:jsar
					</package>
					<install>org.apache.maven.plugins:maven-install-plugin:install
					</install>
					<deploy>org.apache.maven.plugins:maven-deploy-plugin:deploy
					</deploy>
				</phases>
			</configuration>
		</component>
		<!-- Augment the current war process, so that if this plugin is activated, 
			it will copy everything from the Framework directory prior to running the 
			war plugin. -->
		<component>
			<role>org.apache.maven.lifecycle.mapping.LifecycleMapping</role>
			<role-hint>war</role-hint>
			<implementation>org.apache.maven.lifecycle.mapping.DefaultLifecycleMapping
			</implementation>
			<configuration>
				<phases>
					<generate-sources>com.github.dmackenzie1.javascript-framework:jsdependency-maven-plugin:js-dependency
					</generate-sources>
					<process-resources>org.apache.maven.plugins:maven-resources-plugin:resources
					</process-resources>
					<process-test-resources>org.apache.maven.plugins:maven-resources-plugin:testResources
					</process-test-resources>
					<compile>
						com.github.dmackenzie1.javascript-framework:jspreprocessor-maven-plugin:compile-preprocessors,
						org.apache.maven.plugins:maven-compiler-plugin:compile
					</compile>
					<test-compile>org.apache.maven.plugins:maven-compiler-plugin:testCompile
					</test-compile>
					<generate-test-sources>com.github.dmackenzie1.javascript-framework:jsdependency-maven-plugin:js-test-dependency
					</generate-test-sources>
					<test>
						org.apache.maven.plugins:maven-surefire-plugin:test,
						com.github.dmackenzie1.javascript-framework:closure-testing-maven-plugin:js-closure-test
					</test>
					<process-classes>com.github.dmackenzie1.javascript-framework:closure-compiler-maven-plugin:js-closure-compile
					</process-classes>
					<prepare-package>com.github.dmackenzie1.javascript-framework:jsar-maven-plugin:war-move
					</prepare-package>
					<package>org.apache.maven.plugins:maven-war-plugin:war</package>
					<install>org.apache.maven.plugins:maven-install-plugin:install
					</install>
					<deploy>org.apache.maven.plugins:maven-deploy-plugin:deploy
					</deploy>
				</phases>
			</configuration>
		</component>
		<component>
			<role>org.apache.maven.artifact.handler.ArtifactHandler</role>
			<role-hint>jsar</role-hint>
			<implementation>org.apache.maven.artifact.handler.DefaultArtifactHandler
			</implementation>
			<configuration>
				<!--the extension used by Maven in the repository -->
				<extension>jsar</extension>
				<!--the type used when specifying dependencies etc. -->
				<type>jsar</type>
				<!--the packaging used when declaring an implementation of the packaging -->
				<packaging>jsar</packaging>
			</configuration>
		</component>
		
		<component>
			<role>org.codehaus.plexus.archiver.UnArchiver</role>
			<role-hint>javascript</role-hint>
			<implementation>
				com.github.dmackenzie1.javascriptframework.jsar.JavascriptUnArchiver
			</implementation>
			<description>
				Custom archiver for javascript dependencies, packaged as "jsar"
				(JavaScript ARchive), that are simply a jar of scripts and
				resources.
			</description>
			<isolated-realm>false</isolated-realm>
		</component>
		
		<component>
			<role>org.codehaus.plexus.archiver.Archiver</role>
			<role-hint>javascript</role-hint>
			<implementation>
				com.github.dmackenzie1.javascriptframework.jsar.JavascriptArchiver
			</implementation>
			<instantiation-strategy>per-lookup</instantiation-strategy>
			<description>
				Custom archiver for javascript dependencies, packaged as "jsar"
				(JavaScript ARchive), that are simply a jar of scripts and
				resources.
			</description>
			<isolated-realm>false</isolated-realm>
		</component>
	</components>
</component-set>